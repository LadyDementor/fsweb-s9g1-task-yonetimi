{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\nvar e = function (i, e, t) {\n    if (i && \"reportValidity\" in i) {\n      var f = r(t, e);\n      i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n    }\n  },\n  t = function (r, i) {\n    var t = function (t) {\n      var f = i.fields[t];\n      f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, t, r) : f.refs && f.refs.forEach(function (i) {\n        return e(i, t, r);\n      });\n    };\n    for (var f in i.fields) t(f);\n  },\n  f = function (e, f) {\n    f.shouldUseNativeValidation && t(e, f);\n    var o = {};\n    for (var a in e) {\n      var n = r(f.fields, a);\n      i(o, a, Object.assign(e[a] || {}, {\n        ref: n && n.ref\n      }));\n    }\n    return o;\n  };\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"mappings":";AASA,IAAMA,IAAoB,UACxBC,GACAC,GACAC;IAEA,IAAIF,KAAO,oBAAoBA,GAAK;MAClC,IAAMG,IAAQC,EAAIF,GAAQD;MAC1BD,EAAID,kBAAmBI,KAASA,EAAME,WAAY,KAElDL,EAAIM,gBACL;IAAA;EACH;EAGaC,IAAyB,UACpCL,GACAM;IACQ;MAEN,IAAMC,IAAQD,EAAQE,OAAOT;MACzBQ,KAASA,EAAMT,OAAO,oBAAoBS,EAAMT,MAClDD,EAAkBU,EAAMT,KAAKC,GAAWC,KAC/BO,EAAME,QACfF,EAAME,KAAKC,QAAQ,UAACZ;QAAqB,OACvCD,EAAkBC,GAAKC,GAAWC,EAAO;MAAA,EAG9C;IAAA;IATD,KAAK,IAAMD,KAAaO,EAAQE,QAAMG,IAUxC;EAAA;EC3BaC,IAAc,UACzBZ,GACAM;IAEAA,EAAQO,6BAA6BR,EAAuBL,GAAQM;IAEpE,IAAMQ,IAAc;IACpB,KAAK,IAAMC,KAAQf,GAAQ;MACzB,IAAMO,IAAQL,EAAII,EAAQE,QAAQO;MAElCC,EACEF,GACAC,GACAE,OAAOC,OAAOlB,EAAOe,MAAS,CAAE,GAAE;QAAEjB,KAAKS,KAASA,EAAMT;MAAAA,GAE3D;IAAA;IAED,OAAOgB,CACT;EAAA;AAAA","names":["setCustomValidity","ref","fieldPath","errors","error","get","message","reportValidity","validateFieldsNatively","options","field","fields","refs","forEach","_loop","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"sources":["C:\\GITHUP DOSYALAR\\fsweb-s9g1-task-yonetimi\\node_modules\\@hookform\\resolvers\\src\\validateFieldsNatively.ts","C:\\GITHUP DOSYALAR\\fsweb-s9g1-task-yonetimi\\node_modules\\@hookform\\resolvers\\src\\toNestError.ts"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path] || {}, { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}