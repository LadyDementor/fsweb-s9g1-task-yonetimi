{"ast":null,"code":"import { randomFillSync } from 'crypto';\nimport { urlAlphabet } from './url-alphabet/index.js';\nexport { urlAlphabet };\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool, poolOffset;\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n    randomFillSync(pool);\n    poolOffset = 0;\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool);\n    poolOffset = 0;\n  }\n  poolOffset += bytes;\n};\nexport let random = bytes => {\n  fillPool(bytes -= 0);\n  return pool.subarray(poolOffset - bytes, poolOffset);\n};\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;\n  let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let i = step;\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = function (alphabet) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nexport let nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  fillPool(size -= 0);\n  let id = '';\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63];\n  }\n  return id;\n};","map":{"version":3,"names":["randomFillSync","urlAlphabet","POOL_SIZE_MULTIPLIER","pool","poolOffset","fillPool","bytes","length","Buffer","allocUnsafe","random","subarray","customRandom","alphabet","defaultSize","getRandom","mask","Math","clz32","step","ceil","size","id","i","customAlphabet","nanoid"],"sources":["C:/GITHUP DOSYALAR/fsweb-s9g1-task-yonetimi/node_modules/nanoid/index.js"],"sourcesContent":["import { randomFillSync } from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet }\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nexport let random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,QAAQ;AACvC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASA,WAAW;AACpB,MAAMC,oBAAoB,GAAG,GAAG;AAChC,IAAIC,IAAI,EAAEC,UAAU;AACpB,IAAIC,QAAQ,GAAGC,KAAK,IAAI;EACtB,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACI,MAAM,GAAGD,KAAK,EAAE;IAChCH,IAAI,GAAGK,MAAM,CAACC,WAAW,CAACH,KAAK,GAAGJ,oBAAoB,CAAC;IACvDF,cAAc,CAACG,IAAI,CAAC;IACpBC,UAAU,GAAG,CAAC;EAChB,CAAC,MAAM,IAAIA,UAAU,GAAGE,KAAK,GAAGH,IAAI,CAACI,MAAM,EAAE;IAC3CP,cAAc,CAACG,IAAI,CAAC;IACpBC,UAAU,GAAG,CAAC;EAChB;EACAA,UAAU,IAAIE,KAAK;AACrB,CAAC;AACD,OAAO,IAAII,MAAM,GAAGJ,KAAK,IAAI;EAC3BD,QAAQ,CAAEC,KAAK,IAAI,CAAC,CAAE;EACtB,OAAOH,IAAI,CAACQ,QAAQ,CAACP,UAAU,GAAGE,KAAK,EAAEF,UAAU,CAAC;AACtD,CAAC;AACD,OAAO,IAAIQ,YAAY,GAAG,CAACC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,KAAK;EAC9D,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAK,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAEL,QAAQ,CAACN,MAAM,GAAG,CAAC,GAAI,CAAC,CAAE,IAAI,CAAC;EAClE,IAAIY,IAAI,GAAGF,IAAI,CAACG,IAAI,CAAE,GAAG,GAAGJ,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACN,MAAM,CAAC;EAClE,OAAO,YAAwB;IAAA,IAAvBc,IAAI,uEAAGP,WAAW;IACxB,IAAIQ,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIhB,KAAK,GAAGS,SAAS,CAACI,IAAI,CAAC;MAC3B,IAAII,CAAC,GAAGJ,IAAI;MACZ,OAAOI,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIT,QAAQ,CAACP,KAAK,CAACiB,CAAC,CAAC,GAAGP,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIM,EAAE,CAACf,MAAM,KAAKc,IAAI,EAAE,OAAOC,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AACD,OAAO,IAAIE,cAAc,GAAG,UAACX,QAAQ;EAAA,IAAEQ,IAAI,uEAAG,EAAE;EAAA,OAC9CT,YAAY,CAACC,QAAQ,EAAEQ,IAAI,EAAEX,MAAM,CAAC;AAAA;AACtC,OAAO,IAAIe,MAAM,GAAG,YAAe;EAAA,IAAdJ,IAAI,uEAAG,EAAE;EAC5BhB,QAAQ,CAAEgB,IAAI,IAAI,CAAC,CAAE;EACrB,IAAIC,EAAE,GAAG,EAAE;EACX,KAAK,IAAIC,CAAC,GAAGnB,UAAU,GAAGiB,IAAI,EAAEE,CAAC,GAAGnB,UAAU,EAAEmB,CAAC,EAAE,EAAE;IACnDD,EAAE,IAAIrB,WAAW,CAACE,IAAI,CAACoB,CAAC,CAAC,GAAG,EAAE,CAAC;EACjC;EACA,OAAOD,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}